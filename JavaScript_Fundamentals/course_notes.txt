JavaScript: Programming language for web and server-side applications.
  - Makes web pages interactive and dynamic. 
  - Calculates, manipulates, and validates data.

* Builds entire web applications using frameworks such as Angular, React, Vue, and Ember. 
* JavaScript started by running in the browser. Now, it's frequently used on servers/server side applications. 

Browsers: 
  - No real versions. 
  - Latest features are released with browser updates.
  - Different results are possible depending on which broswer a user is using.

Servers: 
  - A good example of running JavaScript on a server is by using NodeJS.
  - New versions of JavaScript are shipped frequently and contain new features.
  - An update to NodeJS is required to use new features. 

JavaScript Syntax Rules:
  *Case sensitive variables and keywords
    - The variable "name" can't be referenced any other way (all lowercase).
    - Keywords such as "if", "new", and "case" follow the same rule.
    - Variables can't be reserved words (if, new, case, etc).
    - White space is ignored.

Running JS Code: 
  - Using the script tag:
<script src="./index.js"></script>

  - In the terminal using Node:
       node index.js

Variables in JavaScript:
   Declaration - when you create a new variable using var, let, or const.
   Initialization - when a variable is given a value for the first time. 

*Note: a variable can be used before initialization.

Variable Scope in JavaScript
  - Scope defines where a variable in JavaScript can be used. 

*JavaScript had two types of scope:
  - Global
  - Function

Block Scope was introduced with:
  - let 
  - const

Global Scope:
  - Can be referenced anywhere in the file. 
  - Declared outside any functions or blocks.
*Note: may cause problems if you're not careful. 

*To declare a variable with Global Scope, simply add the variable outside of a function or any block of code.
     Example: var name = 'Phillip';

Important note: Use Global Scope variables sparingly to avoid variable clashes in bigger files. 

Question: When would I want to use a global scope variable?
     Answer: When using a 3rd party library. 

Structured example:

PROJECT                    index.js                    
 files                      var moment = require('moment');
  index.html
  index.js                   //Global Scope
  package.json              var name = "Phil Squares";
                             console.log(name);
DEPENDENCIES
 moment                       function sayHi(){

                              }

                              function sayBye(){

                              }

Function Scope:
1.) Is used in a function where declared.
2.) Accessible in nested functions.
3.) Not accessible outside a function. 

Hoisting in JavaScript:
 - Happens behind the scenes.
When a variable is declared with the var keyword, the declaration is moved to the top of the variables scope. 
 - Initialization still occurs in the location the programmer enters it meaning that variables
   can be used before they're declared.

Note: Using variables before declared or initialized may cause a bug --> undefined.

Hoisting takes all variables declared in a function or global scope and moves them to the top of their respective
scope. 
   *Remember that the var keyword = Hoisting*

Block Scope:
1.) Declared using let or const.
2.) Usable in the block where the variable is declared.
3.) Block = anywhere encompassed with cury braces { }
4.) ReferenceError occurs if a variable is used before declaration. 

     Code Example: 
-----------------------------------------------
        //Function Scope
    function watchCourse(){
      const courseName = 'JavaScript';
      let satrted = true;

      ------------------------------------
           //Block Scope
      if(started){
        let progress = 50;
        console.log(`I am $(progress) percent`);
      } else{
      ------------------------------------
        let progress = 0;
        console.log(`I am $(progress) percent`);
      }
    }
    watchCourse();
------------------------------------------------

If the progress variable is used outside the block, you will get the following error:
   *Uncaught ReferenceError: progress is not defined.*


var:
 - Function or Global Scope depending on where it's declared.
 - Can be used before it's declared.
 - Generally not recommened. 

let: 
 - Block Scoped.
 - Can't be used before it's declared.
 - Can reassign value.
 - Recommended more than var, and if there is a need to reassign. 

const:
 - Blocked Scoped.
 - Can't be used before it's declared.
 - Can't reassign value.
 - Recommended first choice for variables. 

When using const, we can change the value of an attribute on an object without causing an error as the 
location in memory where the variable is stored has not changed. 

     Code Example: 
  const dog = {
    name: 'Duke'
  }
  console.log(dog.name);
    //returns Duke
  
  dog.name = 'Max';
  console.log(dog.name);
   //returns Max

*The same idea sticks with arrays.*
     Code Example 2:

  const dogs = ['Duke', 'Max'];
  console.log(dogs);
  dogs.push('Bella');
  console.log(dogs);

//returns ['Duke', 'Max', 'Bella']

Value vs. Reference (Variables Storing Data)
 
Value: The data of a variable is copied to other variables, or passed in to functions. 
  When this occurs, changing data of copied variables does not change the data of the original variable. 
   - Strings, numbers, booleans, undefined, and null are examples that use this type of assignment. 

Reference: The variable points to a place in memory. 
  *Does not contain the actual data.
   - Copying variables copies the location in memory to the second variable. 
   - Changing the data of one variable affects all variables that have the reference. 
  *These rules apply to objects and arrays.

*** Value Code Example ***
     let number = 5;
     let number2 = number;
     console.log(number, number2);

  //returns 5 5 in console.

*If I were to reassign the value of number to 10, the following is returned:
     number = 10;
     console.log(number, number2);
       //returns 10 5

*Numbers, Strings, Bools, and undefined are all stored by value here while the output above occurs.

*** Reference Code Example ***
     let person = {
      name: 'Preston'
     }
     let person2 = person; 
     console.log(person, person2);

  //returns {name: 'Preston'} {name: 'Preston'}

     person2.name = 'Joe';
     console.log(person, person2);
  //returns {name: 'Joe'} {name: 'Joe'}

*The two variables (person and person2) are pointing to the same location in memory.

JavaScript Primitive Types
- string     - boolean
- number     - undefined
- null       - symbol

1.) undefined = the absence of a value (unintentional).
2.) null = the intentional absence of a value. 
3.) symbol = provides unique identifiers. 

" ", ' ', or ` ` are used for strings.
Single quotes are most commonly used in JavaScript. 

*** Symbol Code Example ***
     let mySymbol = Symbol('hello');
     console.log(mySymbol); 

  //returns Symbol(hello) in the console. 
   - The code above creates a unique identifier.
Even if a second variable is created using Symbol and the string "hello" is passed in, they would not equal each other. 

     let mySecondSymbol = Symbol('hello');
     console.log(mySymbol == mySecondSymbol);
     //returns false

*** Primitive Types Exercise Review ***
     let myVar3 = 1 + '1';
  - This is considered a string. 

*In JS, taking a number and adding it to a string behaves as if two strings are added together.

Ternary Operator:
 - Is an in line if/else statement. 

For example: 
 let myVar6 = myVar5 === undefined ? null : undefined;
     Explanation:
    - if myVar5 === undefined is true then set value to null(? null)
    - if it's false, set to undefined (: undefined)
---------------------------------------------------------------------------------------------
JavaScript Fundamentals: 
 - The "this" keyword

What is "this"?
 - Refers to the context in which a JavaScript function is run.
 - Context refers to the circumstances that form the setting for an event, statement, or idea. 
 - In JavaScript, "this" is the circumstance in which a function is run.

*** Context Examples ***
1.) "Did you see the game last night? It was crazy!"
     - It refers to the game.

2.) Suppose a famous person walks past and your friend says "Did you see her?" 
     - "Her" referring to the famous person.
-----------------------------------------------------------------------------------------------     

---------------------------------------------------------------------------------------------
Global Context for Functions: 
 - Question: When will a function have Global context? 

*Answer: If JavaScript can't find anymore specific content, then it uses the Global context. 

Global Context is the fallback, but can find specific context most of the time.
---------------------------------------------------------------------------------------------

Function Context: 
 - There are a few ways to find out what the context of a function is:
1.) When a function is called on an object. 
     - Example: obj.myFunction(); 

const person = {
  name: 'Phil'
  sayHello: function(){
    console.log(this);
    console.log(`Hello ${this.name}!`);
  },
};
person.sayHello();

*The variable name "person" is the context of our function here.*

*** Steps to identify the context of a function ***
1.) Look for a function call.
2.) Look to the left... Is there a dot (indicating dot notation)? 
3.) Look to the left of the dot... Is the variable an object?

*Each nested object has its own context if a function is called on that object.*

Method 2: 
 - .call, .apply, and .bind set the context of a function to the object argument. 

*If there is no dot, look for: 
     - .call
     - .apply
     - .bind

Code Example: 
   function sayHello(){
    console.log(this);
    console.log(`Hello, ${this.name}!`);
   }

   const person = {
    name: 'Phil';
   };

   sayHello.call(person); 
   sayHello.apply(person);
   const newFn = sayHello.bind(person);
   newFn();

Console Window Results:
   {name: 'Phil'}
     Hello, Phil!

  *Same result two more times.*

Method 3: The New Keyword
 - When looking at JavaScript code, coming across the "new" keyword means that the function that follows 
   the new keyword has its own context.

--------------------------------------------------------------------------------------------------------
Arrow Functions
 - Normal functions in JS are called named functions.

Example: 
function namedFn(){

}

Arrow functions don't have their own context. Instead, they're enclosed in the surrounding context. 
 - If no other context is specified, then the context is Global. 

For example: 
  const person = {
    name: 'Phil'
    sayHello: () => {
      console.log(this);
      console.log(`Hello ${this.name}!`);
    },
  };
  person.sayHello();

  //The context is Global here. 
----------------------------------------------------------------------------------------------------------

The JavaScript Console:
 A. console.log();
 - console.log takes one to many arguments. 
 - When adding multiple arguments, seperate them with a comma.

Example: console.log('My name is', myName);

*How to print out an object*
 - console.log({myPizza: 'Plain'});

*Using console.log to create and describe an object*
     console.log({
      crust: 'thin',
      sauce: 'alfredo',
      toppings: ['chicken', 'bacon', 'ranch', 'tomato']
     });

*Passing multiple arguments using console.log*
     console.log('My favorite pizza is', {
      crust: 'thin',
      sauce: 'alfredo',
      toppings: ['chicken', 'bacon', 'ranch', 'tomato']
     });

-------------------------------------------------------------------------------------------
 B. console.info();
console.info() is another option.
 - Acts in the same way console.log.

*Note: console.info() may be used if a developer intended the message for someone to see.
 - console.log() is intended for debugging. 
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------
 C. console.warn();
 - When a result is printed out to the console, there is a yellow highlighted warning sign to the left of the result.
-------------------------------------------------------------------------------------------
 D. console.error();
 - Has the same functionality as .warn().
 - The most useful way to use .error() is by using the new error() object. 

 For example: 
  console.error(new Error('This Error'));  

The statement above returns a red x followed by "Error: " in the console with a full stack trace.
--------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
 E. console.table();
  - Prints out any data passed into the function in table format. 
  - Makes data easy to read. 
  - Helpful when viewing all items in an array.

*console.table() works best with objects and arrays.*

Example: If I simply want to view only the names in an object instead of the rest of the attributes, do the following:
 console.table(people, ['name']);

Example 2: Print multiple arrays on a table.
 console.table([pizza1, pizza2]);
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
 F. console.assert();
  - Great for debugging and allowing developers to see if a given condition is met at some point in your application. 
  - If a condition is false, print a message. 
  - If true, nothing is printed. 

*Note: The assert message is only printed if the condition is NOT met.*

Examples: 
    console.assert(1==1, 'The numbers equal');
*This will not be printed to the console.*

const myAge = 31;
const yourAge = 20;

console.assert(myAge < yourAge, 'You are younger');
//Result in console: "Assertion failed: You are younger"

Note: When using .assert, you can add as many objects as you want.
 For example:
   console.assert(myAge < yourAge, {myAge}, {yourAge}, {errorMsg: 'You are younger'});

*Multiple strings, variables, and objects can be passed. 
  - The assertion MUST be first.
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
 G. console.group(); and console.groupEnd();
  - console.groupEnd(); will not be used alone. 

Example: 
 console.group('Hello there!');
 console.log('First message');
 console.log('Second message');
 console.groupEnd();

*Think of the example above as a div*
 - console.group() does not require a name such as 'Hello there!' as seen above. 
---------------------------------------------------------------------------------------------


*** New Section: Logical & Comparison Operators ***
---------------------------------------------------------------------------------------
 - Logical Operators:
Or -> denoted by "||"
 - This value OR that value.
 - Look for one true value. 

AND -> denoted by "&&"

NOT -> denoted by "!"

NULLISH COALESCING -> denoted by "??"
 - Means this value or that value. 
 - Looks for subnet of falsy values.

"??" will only move on to the second statement if the left side is undefined or null. 
  - Other falsy statements do not cause the statement to go to the right side. 
---------------------------------------------------------------------------------------

 - Comparison Operators: Equality/Inequality
Equality - double or triple equal signs ==/===
Inequality - is != // !==

Relational - < // <= or > // >=

Truthy and Falsy Values:
 - Different from True or False boolean values. 

Falsy values include:
 - Boolean False
 - number 0
 - empty string " " 
 - null
 - undefined
 - Not a number (NaN)

*If one of these values is used, the result will be false.*

Truthy Values: 
 Basically everything else. 
  - String containing 0 -> "0"
  - String containing false -> "false"
  - An empty array -> [ ]
  - Empty object -> { }
  - Empty Function ( ) { }

Code Examples: 
 console.log(1 == '1');
//returns True in the console. 

The log statement above returns True because of Abstract Comparison. 
 - Abstract Comparisons are implemented with == or !=

Questions: 
What does this mean? 
 - In JS, both sides of the comparison are converted to the same type before comparison. 

When could this be an issue?
 - First, remember that null is the intentional absence of a value. 
 - Undefined is usually the unintentional absence of a value. 

*If null == undefined, a true value would be returned which is incorrect.*

Null and undefined are two different things. 

*Strict Comparison: no conversion is made. 
 - Compares the values exactly as provided. 

In Strict Comparison, === is used instead of == and !== instead of !=
 - Example: console.log(1 === '1'); 
 //returns false as expected. 

When working with numbers in JavaScript, two numbers are abstractly and strictly equal to each other if they're the same number. 
  Examples: 
(1 == 1); //True
(1 === 1); //True
(1 != 2); //True
(1 !== 2); //True

Strings are abstractly and strictly equal to each other if they have the same sequence of characters
  Examples:
('hi' == 'hi'); //True
('Hi' !== 'hi'); //True


*Objects: Passing and saving by reference vs. Passing and saving by value*
 - Objects are passed and saved by reference. 

In the example below, we're comparing the location in memory where both objects are stored, NOT the object itself. 
 - console.log({attr: 'hi'} == {attr: 'hi'});
     //returns false;

*Two objects are abstractly and strictly equal to each other if they point to the same location in memory.*

console.log({attr: 'hi'} == {attr: 'hi'});
const myObj = {attr: 'hi'};
const myObj2 = myObj; 
console.log(myObj == myObj2);
 //returns true

*Two booleans are abstractly and strictly equal to each other if they are BOTH TRUE or BOTH FALSE.*
  console.log(true === true);
  console.log(false !== true);
   //both return true.

***Relational Operators***
     > & >=

***Logical Operator***
    - OR

  Example: 
    function sayHello(name){
      const useName = name || 'Person';
      console.log(`Hello ${useName}`)
    }

    sayHello();

  //returns Hello Person

-----------------------------------------------------------------------------------------------------------------------------
  ***Logical Operator***
      - NOT

  1.) The ! operator works great for checking if a variable or attribute exists, and then reacting. 
  2.) !! lets you convert a truthy value to the boolean result true and falsy to the boolean value false. 

  Exercise Examples:
  1.) !dog.name

  const dog = {
    breed: 'Labradoodle'
  }
*Since dog.name is undefined, !dog.name returns true. 

  2.) What is the value of name? 

  let name = !!dog.name;
  name = !dog.name

  //returns false for !!dog.name as it's undefined.
  //name = !dog.name returns true as it's undefined.

*Provide a value for the if statement variable using the not operator and the name attribute so that you enter the if statement:
  const ifStatement = !dog.name;
    if(ifStatement){
      dog.name = 'Max';
    }
    console.log(dog);
-----------------------------------------------------------------------------------------------------------------------------------

***Nullish Coalescing Operator***
     - Works the same as or -> ||
  
  function setScore(score){
    return score || 10; 
  }
  console.log(setScore(0));

//returns 10 as or || does not allow 0 to be used. 
  *That's where the "Nullish Coalescing" comes in.*

this value ?? that value
 -> null ?? use_this
 -> undefined ?? use_this

*Simply swap the return score || 10; with the following to return the value 0:
     return score ?? 10; 
       //returns 0

If console.log(setScore(undefined));
          or
   console.log(setScore(null));
      //returns 10

   console.log(null ?? undefined); 
      //returns undefined

Exercise Examples:
  5 ?? 100 --> 5(since it's valid)
  0 ?? null --> 0(valid)
  null ?? 5 --> 5(moves on w/ null)
  null ?? undefined --> undefined
--------------------------------------------------------------------------------------------------------------------------------------

***Looping in JavaScript***

for - similiar to other languages 
 *Loop up to length of object times. 

for ... of - loops over each element in an iterable object
 *Loop up to length of object times. 

For example, 4 elements in an array will loop 4 times. 

for ... in - loop over each key in an object.
 *Limited number of loops. 

do ... while - Do some code while a condition is met. 
  *Can go as long as needed.

break - breaks out of a loop and will not re-enter. 

continue - skip one time around the loop.
  *Re-enters the loop next time.


***For Loop Examples on Arrays***
